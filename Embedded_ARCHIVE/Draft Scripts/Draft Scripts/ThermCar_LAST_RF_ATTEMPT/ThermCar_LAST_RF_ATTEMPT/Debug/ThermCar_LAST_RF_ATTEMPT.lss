
ThermCar_LAST_RF_ATTEMPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003de  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800106  00800106  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dc  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000679  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000803  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  9e:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	
	EICRA |= (1<<ISC01);
	EICRA &= ~(1<<ISC01);
	
	EIMSK |= (1<<INT0);
	sei();
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <USART_Transmit>:
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <USART_Transmit>
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <spi_init>:
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	8d 62       	ori	r24, 0x2D	; 45
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	8c b5       	in	r24, 0x2c	; 44
  de:	80 65       	ori	r24, 0x50	; 80
  e0:	8c bd       	out	0x2c, r24	; 44
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8f 77       	andi	r24, 0x7F	; 127
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	08 95       	ret

000000f0 <WriteByteSPI>:
  f0:	8e bd       	out	0x2e, r24	; 46
  f2:	0d b4       	in	r0, 0x2d	; 45
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <WriteByteSPI+0x2>
  f8:	8e b5       	in	r24, 0x2e	; 46
  fa:	08 95       	ret

000000fc <GetReg>:
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <GetReg+0x2>
 102:	00 00       	nop
 104:	95 b1       	in	r25, 0x05	; 5
 106:	9e 7f       	andi	r25, 0xFE	; 254
 108:	95 b9       	out	0x05, r25	; 5
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <GetReg+0x10>
 110:	00 00       	nop
 112:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <GetReg+0x1c>
 11c:	00 00       	nop
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <GetReg+0x2a>
 12a:	00 00       	nop
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	91 60       	ori	r25, 0x01	; 1
 130:	95 b9       	out	0x05, r25	; 5
 132:	08 95       	ret

00000134 <WriteToNrf>:
 134:	cf 92       	push	r12
 136:	df 92       	push	r13
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	18 2f       	mov	r17, r24
 144:	f6 2e       	mov	r15, r22
 146:	6a 01       	movw	r12, r20
 148:	02 2f       	mov	r16, r18
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	11 f4       	brne	.+4      	; 0x152 <WriteToNrf+0x1e>
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	f8 0e       	add	r15, r24
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <WriteToNrf+0x20>
 158:	00 00       	nop
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	85 b9       	out	0x05, r24	; 5
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <WriteToNrf+0x2e>
 166:	00 00       	nop
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	8f 0d       	add	r24, r15
 16c:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <WriteToNrf+0x3e>
 176:	00 00       	nop
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	1c c0       	rjmp	.+56     	; 0x1b6 <WriteToNrf+0x82>
 17e:	11 11       	cpse	r17, r1
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <WriteToNrf+0x6c>
 182:	80 ea       	ldi	r24, 0xA0	; 160
 184:	f8 16       	cp	r15, r24
 186:	61 f0       	breq	.+24     	; 0x1a0 <WriteToNrf+0x6c>
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 18e:	fe 01       	movw	r30, r28
 190:	ea 5f       	subi	r30, 0xFA	; 250
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 83       	st	Z, r24
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <WriteToNrf+0x64>
 19c:	00 00       	nop
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <WriteToNrf+0x80>
 1a0:	f6 01       	movw	r30, r12
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <WriteToNrf+0x7a>
 1b2:	00 00       	nop
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	80 2f       	mov	r24, r16
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	c8 17       	cp	r28, r24
 1bc:	d9 07       	cpc	r29, r25
 1be:	fc f2       	brlt	.-66     	; 0x17e <WriteToNrf+0x4a>
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <nrf24l01_init>:
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <nrf24l01_init+0x8>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <nrf24l01_init+0xa>
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	87 ea       	ldi	r24, 0xA7	; 167
 1ec:	91 e6       	ldi	r25, 0x61	; 97
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <nrf24l01_init+0x14>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <nrf24l01_init+0x1a>
 1f4:	00 00       	nop
 1f6:	11 e0       	ldi	r17, 0x01	; 1
 1f8:	19 83       	std	Y+1, r17	; 0x01
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	ae 01       	movw	r20, r28
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 20a:	8f e2       	ldi	r24, 0x2F	; 47
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	ae 01       	movw	r20, r28
 212:	4f 5f       	subi	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 21e:	19 83       	std	Y+1, r17	; 0x01
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	ae 01       	movw	r20, r28
 224:	4f 5f       	subi	r20, 0xFF	; 255
 226:	5f 4f       	sbci	r21, 0xFF	; 255
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	ae 01       	movw	r20, r28
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 244:	19 83       	std	Y+1, r17	; 0x01
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	ae 01       	movw	r20, r28
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	66 e0       	ldi	r22, 0x06	; 6
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	09 c0       	rjmp	.+18     	; 0x26e <nrf24l01_init+0x94>
 25c:	e1 e0       	ldi	r30, 0x01	; 1
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ec 0f       	add	r30, r28
 262:	fd 1f       	adc	r31, r29
 264:	e8 0f       	add	r30, r24
 266:	f9 1f       	adc	r31, r25
 268:	22 e1       	ldi	r18, 0x12	; 18
 26a:	20 83       	st	Z, r18
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	85 30       	cpi	r24, 0x05	; 5
 270:	91 05       	cpc	r25, r1
 272:	a4 f3       	brlt	.-24     	; 0x25c <nrf24l01_init+0x82>
 274:	25 e0       	ldi	r18, 0x05	; 5
 276:	ae 01       	movw	r20, r28
 278:	4f 5f       	subi	r20, 0xFF	; 255
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	6a e0       	ldi	r22, 0x0A	; 10
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	09 c0       	rjmp	.+18     	; 0x29c <nrf24l01_init+0xc2>
 28a:	e1 e0       	ldi	r30, 0x01	; 1
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 0f       	add	r30, r28
 290:	fd 1f       	adc	r31, r29
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	22 e1       	ldi	r18, 0x12	; 18
 298:	20 83       	st	Z, r18
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 05       	cpc	r25, r1
 2a0:	a4 f3       	brlt	.-24     	; 0x28a <nrf24l01_init+0xb0>
 2a2:	25 e0       	ldi	r18, 0x05	; 5
 2a4:	ae 01       	movw	r20, r28
 2a6:	4f 5f       	subi	r20, 0xFF	; 255
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	60 e1       	ldi	r22, 0x10	; 16
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	ae 01       	movw	r20, r28
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
 2be:	61 e1       	ldi	r22, 0x11	; 17
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 2c6:	8e e1       	ldi	r24, 0x1E	; 30
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	ae 01       	movw	r20, r28
 2ce:	4f 5f       	subi	r20, 0xFF	; 255
 2d0:	5f 4f       	sbci	r21, 0xFF	; 255
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 2da:	87 ea       	ldi	r24, 0xA7	; 167
 2dc:	91 e6       	ldi	r25, 0x61	; 97
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <nrf24l01_init+0x104>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <nrf24l01_init+0x10a>
 2e4:	00 00       	nop
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <transmit_payload>:
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	61 ee       	ldi	r22, 0xE1	; 225
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 30a:	25 e0       	ldi	r18, 0x05	; 5
 30c:	ae 01       	movw	r20, r28
 30e:	60 ea       	ldi	r22, 0xA0	; 160
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 9a 00 	call	0x134	; 0x134 <WriteToNrf>
 316:	83 ec       	ldi	r24, 0xC3	; 195
 318:	99 e0       	ldi	r25, 0x09	; 9
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <transmit_payload+0x22>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <transmit_payload+0x28>
 320:	00 00       	nop
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	80 68       	ori	r24, 0x80	; 128
 326:	8b b9       	out	0x0b, r24	; 11
 328:	96 e0       	ldi	r25, 0x06	; 6
 32a:	9a 95       	dec	r25
 32c:	f1 f7       	brne	.-4      	; 0x32a <transmit_payload+0x32>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <transmit_payload+0x38>
 330:	8b b1       	in	r24, 0x0b	; 11
 332:	8f 77       	andi	r24, 0x7F	; 127
 334:	8b b9       	out	0x0b, r24	; 11
 336:	83 ec       	ldi	r24, 0xC3	; 195
 338:	99 e0       	ldi	r25, 0x09	; 9
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <transmit_payload+0x42>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <transmit_payload+0x48>
 340:	00 00       	nop
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <reset>:
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <reset+0x2>
 34e:	00 00       	nop
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	85 b9       	out	0x05, r24	; 5
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <reset+0x10>
 35c:	00 00       	nop
 35e:	87 e2       	ldi	r24, 0x27	; 39
 360:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <reset+0x1e>
 36a:	00 00       	nop
 36c:	80 e7       	ldi	r24, 0x70	; 112
 36e:	0e 94 78 00 	call	0xf0	; 0xf0 <WriteByteSPI>
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <reset+0x2c>
 378:	00 00       	nop
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	85 b9       	out	0x05, r24	; 5
 380:	08 95       	ret

00000382 <main>:
/*
Main Code...

*/
int main(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <main+0x6>
 388:	00 d0       	rcall	.+0      	; 0x38a <main+0x8>
 38a:	1f 92       	push	r1
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buf [] = {'1','2','3','4','5'};
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	de 01       	movw	r26, r28
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x18>
	USART_Init(MYUBRR);
 3a2:	87 e6       	ldi	r24, 0x67	; 103
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	spi_init();
 3aa:	0e 94 65 00 	call	0xca	; 0xca <spi_init>
	//INT0_interrupt_init();
	nrf24l01_init();
 3ae:	0e 94 ed 00 	call	0x1da	; 0x1da <nrf24l01_init>
	uint8_t *data;
	USART_Transmit('S');
 3b2:	83 e5       	ldi	r24, 0x53	; 83
 3b4:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	}
	*/
	///*
	while(1)
	{
		USART_Transmit(GetReg(RX_ADDR_P0));
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	0e 94 7e 00 	call	0xfc	; 0xfc <GetReg>
 3be:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		reset();
 3c2:	0e 94 a4 01 	call	0x348	; 0x348 <reset>
		transmit_payload(buf);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <transmit_payload>
		//USART_Transmit('N');
		while((GetReg(STATUS) & (1<<4)) != 0);
 3ce:	87 e0       	ldi	r24, 0x07	; 7
 3d0:	0e 94 7e 00 	call	0xfc	; 0xfc <GetReg>
 3d4:	84 fd       	sbrc	r24, 4
 3d6:	fb cf       	rjmp	.-10     	; 0x3ce <main+0x4c>
 3d8:	ef cf       	rjmp	.-34     	; 0x3b8 <main+0x36>

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
