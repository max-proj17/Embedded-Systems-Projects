
ThermReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001203  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f0  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000675  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f3  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 94 01 	call	0x328	; 0x328 <main>
  88:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
	
	EICRA |= (1<<ISC01);
	EICRA &= ~(1<<ISC01);
	
	EIMSK |= (1<<INT0);
	sei();
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <USART_Transmit>
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	08 95       	ret

000000b4 <spi_init>:
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	88 62       	ori	r24, 0x28	; 40
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8f 7e       	andi	r24, 0xEF	; 239
  be:	84 b9       	out	0x04, r24	; 4
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	80 63       	ori	r24, 0x30	; 48
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	80 65       	ori	r24, 0x50	; 80
  ca:	8c bd       	out	0x2c, r24	; 44
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret

000000da <WriteByteSPI>:
  da:	8e bd       	out	0x2e, r24	; 46
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <WriteByteSPI+0x2>
  e2:	8e b5       	in	r24, 0x2e	; 46
  e4:	08 95       	ret

000000e6 <GetReg>:
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <GetReg+0x2>
  ec:	00 00       	nop
  ee:	9b b1       	in	r25, 0x0b	; 11
  f0:	9f 7d       	andi	r25, 0xDF	; 223
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <GetReg+0x10>
  fa:	00 00       	nop
  fc:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <GetReg+0x1c>
 106:	00 00       	nop
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <GetReg+0x2a>
 114:	00 00       	nop
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	90 62       	ori	r25, 0x20	; 32
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	08 95       	ret

0000011e <WriteToNrf>:
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	18 2f       	mov	r17, r24
 12e:	f6 2e       	mov	r15, r22
 130:	6a 01       	movw	r12, r20
 132:	02 2f       	mov	r16, r18
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	11 f4       	brne	.+4      	; 0x13c <WriteToNrf+0x1e>
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	f8 0e       	add	r15, r24
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <WriteToNrf+0x20>
 142:	00 00       	nop
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7d       	andi	r24, 0xDF	; 223
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <WriteToNrf+0x2e>
 150:	00 00       	nop
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	8f 0d       	add	r24, r15
 156:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <WriteToNrf+0x3e>
 160:	00 00       	nop
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	1c c0       	rjmp	.+56     	; 0x1a0 <WriteToNrf+0x82>
 168:	11 11       	cpse	r17, r1
 16a:	0f c0       	rjmp	.+30     	; 0x18a <WriteToNrf+0x6c>
 16c:	80 ea       	ldi	r24, 0xA0	; 160
 16e:	f8 16       	cp	r15, r24
 170:	61 f0       	breq	.+24     	; 0x18a <WriteToNrf+0x6c>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 178:	fe 01       	movw	r30, r28
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 83       	st	Z, r24
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <WriteToNrf+0x64>
 186:	00 00       	nop
 188:	0a c0       	rjmp	.+20     	; 0x19e <WriteToNrf+0x80>
 18a:	f6 01       	movw	r30, r12
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	80 81       	ld	r24, Z
 192:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <WriteToNrf+0x7a>
 19c:	00 00       	nop
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	80 2f       	mov	r24, r16
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	c8 17       	cp	r28, r24
 1a6:	d9 07       	cpc	r29, r25
 1a8:	fc f2       	brlt	.-66     	; 0x168 <WriteToNrf+0x4a>
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	df 90       	pop	r13
 1c0:	cf 90       	pop	r12
 1c2:	08 95       	ret

000001c4 <nrf24l01_init>:
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <nrf24l01_init+0x8>
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <nrf24l01_init+0xa>
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	87 ea       	ldi	r24, 0xA7	; 167
 1d6:	91 e6       	ldi	r25, 0x61	; 97
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <nrf24l01_init+0x14>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <nrf24l01_init+0x1a>
 1de:	00 00       	nop
 1e0:	11 e0       	ldi	r17, 0x01	; 1
 1e2:	19 83       	std	Y+1, r17	; 0x01
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	ae 01       	movw	r20, r28
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 1f4:	8f e2       	ldi	r24, 0x2F	; 47
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	ae 01       	movw	r20, r28
 1fc:	4f 5f       	subi	r20, 0xFF	; 255
 1fe:	5f 4f       	sbci	r21, 0xFF	; 255
 200:	64 e0       	ldi	r22, 0x04	; 4
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 208:	19 83       	std	Y+1, r17	; 0x01
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	ae 01       	movw	r20, r28
 20e:	4f 5f       	subi	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	ae 01       	movw	r20, r28
 222:	4f 5f       	subi	r20, 0xFF	; 255
 224:	5f 4f       	sbci	r21, 0xFF	; 255
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 22e:	19 83       	std	Y+1, r17	; 0x01
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	ae 01       	movw	r20, r28
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	66 e0       	ldi	r22, 0x06	; 6
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	09 c0       	rjmp	.+18     	; 0x258 <nrf24l01_init+0x94>
 246:	e1 e0       	ldi	r30, 0x01	; 1
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	e8 0f       	add	r30, r24
 250:	f9 1f       	adc	r31, r25
 252:	22 e1       	ldi	r18, 0x12	; 18
 254:	20 83       	st	Z, r18
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	91 05       	cpc	r25, r1
 25c:	a4 f3       	brlt	.-24     	; 0x246 <nrf24l01_init+0x82>
 25e:	25 e0       	ldi	r18, 0x05	; 5
 260:	ae 01       	movw	r20, r28
 262:	4f 5f       	subi	r20, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	09 c0       	rjmp	.+18     	; 0x286 <nrf24l01_init+0xc2>
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	e8 0f       	add	r30, r24
 27e:	f9 1f       	adc	r31, r25
 280:	22 e1       	ldi	r18, 0x12	; 18
 282:	20 83       	st	Z, r18
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	85 30       	cpi	r24, 0x05	; 5
 288:	91 05       	cpc	r25, r1
 28a:	a4 f3       	brlt	.-24     	; 0x274 <nrf24l01_init+0xb0>
 28c:	25 e0       	ldi	r18, 0x05	; 5
 28e:	ae 01       	movw	r20, r28
 290:	4f 5f       	subi	r20, 0xFF	; 255
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	60 e1       	ldi	r22, 0x10	; 16
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	ae 01       	movw	r20, r28
 2a4:	4f 5f       	subi	r20, 0xFF	; 255
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	61 e1       	ldi	r22, 0x11	; 17
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 2b0:	87 ea       	ldi	r24, 0xA7	; 167
 2b2:	91 e6       	ldi	r25, 0x61	; 97
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <nrf24l01_init+0xf0>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <nrf24l01_init+0xf6>
 2ba:	00 00       	nop
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	08 95       	ret

000002ce <recieve_payload>:
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	2f e3       	ldi	r18, 0x3F	; 63
 2d6:	8d e0       	ldi	r24, 0x0D	; 13
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <recieve_payload+0xc>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <recieve_payload+0x16>
 2e4:	00 00       	nop
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	08 95       	ret

000002ee <reset>:
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <reset+0x2>
 2f4:	00 00       	nop
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	8b b9       	out	0x0b, r24	; 11
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <reset+0x10>
 302:	00 00       	nop
 304:	87 e2       	ldi	r24, 0x27	; 39
 306:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <reset+0x1e>
 310:	00 00       	nop
 312:	80 e7       	ldi	r24, 0x70	; 112
 314:	0e 94 6d 00 	call	0xda	; 0xda <WriteByteSPI>
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <reset+0x2c>
 31e:	00 00       	nop
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	80 62       	ori	r24, 0x20	; 32
 324:	8b b9       	out	0x0b, r24	; 11
 326:	08 95       	ret

00000328 <main>:

*/
int main(void)
{
	uint8_t buf [] = {'1','2','3','4','5'};
	USART_Init(MYUBRR);
 328:	87 e6       	ldi	r24, 0x67	; 103
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	USART_Transmit('D');
 330:	84 e4       	ldi	r24, 0x44	; 68
 332:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	spi_init();
 336:	0e 94 5a 00 	call	0xb4	; 0xb4 <spi_init>
	USART_Transmit('P');
 33a:	80 e5       	ldi	r24, 0x50	; 80
 33c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	//INT0_interrupt_init();
	nrf24l01_init();
 340:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24l01_init>
	uint8_t *data;
	USART_Transmit('S');
 344:	83 e5       	ldi	r24, 0x53	; 83
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	///*
	while(1)
	{
		reset();
 34a:	0e 94 77 01 	call	0x2ee	; 0x2ee <reset>
		//transmit_payload(buf);
		USART_Transmit(GetReg(STATUS));
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	0e 94 73 00 	call	0xe6	; 0xe6 <GetReg>
 354:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		recieve_payload();
 358:	0e 94 67 01 	call	0x2ce	; 0x2ce <recieve_payload>
		
		
		if((GetReg(STATUS) & (1<<6)) != 0)
 35c:	87 e0       	ldi	r24, 0x07	; 7
 35e:	0e 94 73 00 	call	0xe6	; 0xe6 <GetReg>
 362:	86 ff       	sbrs	r24, 6
 364:	f2 cf       	rjmp	.-28     	; 0x34a <main+0x22>
		{
			data = WriteToNrf(R, R_RX_PAYLOAD, data, 1);
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	ae 01       	movw	r20, r28
 36a:	61 e6       	ldi	r22, 0x61	; 97
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 8f 00 	call	0x11e	; 0x11e <WriteToNrf>
 372:	ec 01       	movw	r28, r24
			USART_Transmit(data[0]);
 374:	88 81       	ld	r24, Y
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
 37a:	e7 cf       	rjmp	.-50     	; 0x34a <main+0x22>

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
