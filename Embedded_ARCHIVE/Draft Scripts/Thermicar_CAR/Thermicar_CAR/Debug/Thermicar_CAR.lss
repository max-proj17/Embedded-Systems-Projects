
Thermicar_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000c64  00000cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800132  00800132  00000d2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f0  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a98  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ff  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098d  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 00 	call	0xca	; 0xca <main>
  9e:	0c 94 30 06 	jmp	0xc60	; 0xc60 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	//Dtostrf
	return UDR0;
}
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <USART_Transmit>:
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <USART_Transmit>
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <main>:

int main(void) {
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	c0 54       	subi	r28, 0x40	; 64
  d4:	d1 09       	sbc	r29, r1
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
	
	char tx_message[32];
	char rx_message[32];
	strcpy(tx_message,"Hello World!");
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	ea e0       	ldi	r30, 0x0A	; 10
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x20>
	USART_Init(MYUBRR);
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	USART_Transmit('L');
  fa:	8c e4       	ldi	r24, 0x4C	; 76
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	//uart_init();
	nrf24_init();
 100:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <nrf24_init>
	USART_Transmit('L');
 104:	8c e4       	ldi	r24, 0x4C	; 76
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	//printf("I'm the Car\n");
	//print_config();
	
	nrf24_start_listening();
 10a:	0e 94 1c 02 	call	0x438	; 0x438 <nrf24_start_listening>
	
	while (1) {
		USART_Transmit('L');
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		if(nrf24_available())
 114:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <nrf24_available>
 118:	89 2b       	or	r24, r25
 11a:	c9 f3       	breq	.-14     	; 0x10e <main+0x44>
		{
			strcpy(rx_message,nrf24_read_message());
 11c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <nrf24_read_message>
 120:	bc 01       	movw	r22, r24
 122:	ce 01       	movw	r24, r28
 124:	81 96       	adiw	r24, 0x21	; 33
 126:	0e 94 4b 03 	call	0x696	; 0x696 <strcpy>
			USART_Transmit('R');
 12a:	82 e5       	ldi	r24, 0x52	; 82
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f e9       	ldi	r18, 0x9F	; 159
 132:	86 e8       	ldi	r24, 0x86	; 134
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x6c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x76>
 140:	00 00       	nop
			//printf("Received message: %s\n",rx_message);
			_delay_ms(500); // Wait for 1 second
			
			status = nrf24_send_message(tx_message);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 29 02 	call	0x452	; 0x452 <nrf24_send_message>
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	81 11       	cpse	r24, r1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x88>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__data_end>
			if(status == true)
 156:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 15a:	88 23       	and	r24, r24
 15c:	c1 f2       	breq	.-80     	; 0x10e <main+0x44>
			{
				//printf("Message sent successfully\n");
				USART_Transmit('S');
 15e:	83 e5       	ldi	r24, 0x53	; 83
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
 164:	d4 cf       	rjmp	.-88     	; 0x10e <main+0x44>

00000166 <nrf24_send_spi>:
	unsigned int length = 1;
	csn_low;
	spi_send(W_ACK_PAYLOAD);
	while (length--) spi_send(*(uint8_t *)ack++);
	csn_high;
}
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	6b 01       	movw	r12, r22
 17a:	7a 01       	movw	r14, r20
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	9f 7e       	andi	r25, 0xEF	; 239
 180:	9b b9       	out	0x0b, r25	; 11
 182:	0e 94 45 03 	call	0x68a	; 0x68a <spi_exchange>
 186:	b8 2e       	mov	r11, r24
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <nrf24_send_spi+0x3c>
 18e:	86 01       	movw	r16, r12
 190:	0c 0f       	add	r16, r28
 192:	1d 1f       	adc	r17, r29
 194:	f8 01       	movw	r30, r16
 196:	80 81       	ld	r24, Z
 198:	0e 94 45 03 	call	0x68a	; 0x68a <spi_exchange>
 19c:	f8 01       	movw	r30, r16
 19e:	80 83       	st	Z, r24
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	ce 15       	cp	r28, r14
 1a4:	df 05       	cpc	r29, r15
 1a6:	98 f3       	brcs	.-26     	; 0x18e <nrf24_send_spi+0x28>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	8b 2d       	mov	r24, r11
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	bf 90       	pop	r11
 1c2:	08 95       	ret

000001c4 <nrf24_write>:
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	0e 94 b3 00 	call	0x166	; 0x166 <nrf24_send_spi>
 1ca:	08 95       	ret

000001cc <nrf24_read>:
 1cc:	0e 94 b3 00 	call	0x166	; 0x166 <nrf24_send_spi>
 1d0:	08 95       	ret

000001d2 <nrf24_init>:
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	f8 94       	cli
 1e2:	e9 e6       	ldi	r30, 0x69	; 105
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	80 83       	st	Z, r24
 1ec:	8d b3       	in	r24, 0x1d	; 29
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8d bb       	out	0x1d, r24	; 29
 1f2:	78 94       	sei
 1f4:	8a b1       	in	r24, 0x0a	; 10
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	8a b9       	out	0x0a, r24	; 10
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	80 61       	ori	r24, 0x10	; 16
 204:	8b b9       	out	0x0b, r24	; 11
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 7d       	andi	r24, 0xDF	; 223
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	0e 94 34 03 	call	0x668	; 0x668 <spi_master_init>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	81 ee       	ldi	r24, 0xE1	; 225
 214:	94 e0       	ldi	r25, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <nrf24_init+0x44>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <nrf24_init+0x4e>
 220:	00 00       	nop
 222:	0f e3       	ldi	r16, 0x3F	; 63
 224:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <data>
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	63 e5       	ldi	r22, 0x53	; 83
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 236:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <data>
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	63 e5       	ldi	r22, 0x53	; 83
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 248:	80 ef       	ldi	r24, 0xF0	; 240
 24a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	63 e5       	ldi	r22, 0x53	; 83
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 25c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <data>
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	63 e5       	ldi	r22, 0x53	; 83
 266:	71 e0       	ldi	r23, 0x01	; 1
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 26e:	84 e7       	ldi	r24, 0x74	; 116
 270:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	63 e5       	ldi	r22, 0x53	; 83
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 282:	8e e0       	ldi	r24, 0x0E	; 14
 284:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	63 e5       	ldi	r22, 0x53	; 83
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 296:	10 e7       	ldi	r17, 0x70	; 112
 298:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <data>
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	63 e5       	ldi	r22, 0x53	; 83
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	87 e0       	ldi	r24, 0x07	; 7
 2a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2aa:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <data>
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	63 e5       	ldi	r22, 0x53	; 83
 2b4:	71 e0       	ldi	r23, 0x01	; 1
 2b6:	8c e1       	ldi	r24, 0x1C	; 28
 2b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	63 e5       	ldi	r22, 0x53	; 83
 2c8:	71 e0       	ldi	r23, 0x01	; 1
 2ca:	8d e1       	ldi	r24, 0x1D	; 29
 2cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2d0:	19 83       	std	Y+1, r17	; 0x01
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	82 ee       	ldi	r24, 0xE2	; 226
 2dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	81 ee       	ldi	r24, 0xE1	; 225
 2ea:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2ee:	45 e0       	ldi	r20, 0x05	; 5
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	71 e0       	ldi	r23, 0x01	; 1
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 2fc:	45 e0       	ldi	r20, 0x05	; 5
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	71 e0       	ldi	r23, 0x01	; 1
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	be 01       	movw	r22, r28
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	be 01       	movw	r22, r28
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <nrf24_state>:

void nrf24_state(uint8_t state)
{
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	1f 92       	push	r1
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	18 2f       	mov	r17, r24
	uint8_t config_register;
	nrf24_read(CONFIG,&config_register,1);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	
	switch (state)
 35a:	13 30       	cpi	r17, 0x03	; 3
 35c:	71 f1       	breq	.+92     	; 0x3ba <nrf24_state+0x7e>
 35e:	28 f4       	brcc	.+10     	; 0x36a <nrf24_state+0x2e>
 360:	11 30       	cpi	r17, 0x01	; 1
 362:	59 f0       	breq	.+22     	; 0x37a <nrf24_state+0x3e>
 364:	12 30       	cpi	r17, 0x02	; 2
 366:	e9 f0       	breq	.+58     	; 0x3a2 <nrf24_state+0x66>
 368:	62 c0       	rjmp	.+196    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 36a:	15 30       	cpi	r17, 0x05	; 5
 36c:	09 f4       	brne	.+2      	; 0x370 <nrf24_state+0x34>
 36e:	47 c0       	rjmp	.+142    	; 0x3fe <nrf24_state+0xc2>
 370:	d0 f1       	brcs	.+116    	; 0x3e6 <nrf24_state+0xaa>
 372:	16 30       	cpi	r17, 0x06	; 6
 374:	09 f4       	brne	.+2      	; 0x378 <nrf24_state+0x3c>
 376:	47 c0       	rjmp	.+142    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 378:	5a c0       	rjmp	.+180    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		case POWERUP:
		// Check if already powered up
		if (!(config_register & (1 << PWR_UP)))
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	81 fd       	sbrc	r24, 1
 37e:	57 c0       	rjmp	.+174    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			data = config_register | (1 << PWR_UP);
 380:	82 60       	ori	r24, 0x02	; 2
 382:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
			nrf24_write(CONFIG,&data,1);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	63 e5       	ldi	r22, 0x53	; 83
 38c:	71 e0       	ldi	r23, 0x01	; 1
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
 394:	8f e3       	ldi	r24, 0x3F	; 63
 396:	9f e1       	ldi	r25, 0x1F	; 31
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <nrf24_state+0x5c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <nrf24_state+0x62>
 39e:	00 00       	nop
 3a0:	46 c0       	rjmp	.+140    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			// 1.5ms from POWERDOWN to start up
			_delay_ms(2);
		}
		break;
		case POWERDOWN:
		data = config_register & ~(1 << PWR_UP);
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(CONFIG,&data,1);
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	63 e5       	ldi	r22, 0x53	; 83
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		break;
 3b8:	3a c0       	rjmp	.+116    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case RECEIVE:
		data = config_register | (1 << PRIM_RX);
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(CONFIG,&data,1);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	63 e5       	ldi	r22, 0x53	; 83
 3c8:	71 e0       	ldi	r23, 0x01	; 1
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		// Clear STATUS register
		data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 3d0:	80 e7       	ldi	r24, 0x70	; 112
 3d2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(STATUS,&data,1);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	63 e5       	ldi	r22, 0x53	; 83
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	87 e0       	ldi	r24, 0x07	; 7
 3e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		break;
 3e4:	24 c0       	rjmp	.+72     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case TRANSMIT:
		data = config_register & ~(1 << PRIM_RX);
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	8e 7f       	andi	r24, 0xFE	; 254
 3ea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(CONFIG,&data,1);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	63 e5       	ldi	r22, 0x53	; 83
 3f4:	71 e0       	ldi	r23, 0x01	; 1
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		break;
 3fc:	18 c0       	rjmp	.+48     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case STANDBY1:
		ce_low;
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	8f 7d       	andi	r24, 0xDF	; 223
 402:	8b b9       	out	0x0b, r24	; 11
		break;
 404:	14 c0       	rjmp	.+40     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case STANDBY2:
		data = config_register & ~(1 << PRIM_RX);
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(CONFIG,&data,1);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	63 e5       	ldi	r22, 0x53	; 83
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		ce_high;
 41c:	8b b1       	in	r24, 0x0b	; 11
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	87 e5       	ldi	r24, 0x57	; 87
 424:	92 e0       	ldi	r25, 0x02	; 2
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
		_delay_us(150);
		break;
	}
}
 42e:	0f 90       	pop	r0
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	08 95       	ret

00000438 <nrf24_start_listening>:

void nrf24_start_listening(void)
{
	nrf24_state(RECEIVE);				// Receive mode
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 9e 01 	call	0x33c	; 0x33c <nrf24_state>
	//if (AUTO_ACK) nrf24_write_ack();	// Write acknowledgment
	ce_high;
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	80 62       	ori	r24, 0x20	; 32
 442:	8b b9       	out	0x0b, r24	; 11
 444:	87 e5       	ldi	r24, 0x57	; 87
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <nrf24_start_listening+0x10>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <nrf24_start_listening+0x16>
 44e:	00 00       	nop
 450:	08 95       	ret

00000452 <nrf24_send_message>:
	_delay_us(150);						// Settling time
}

uint8_t nrf24_send_message(const void *tx_message)
{
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	a0 97       	sbiw	r28, 0x20	; 32
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	7c 01       	movw	r14, r24
	// For printf();
	char temp[32];
	memset(temp,0,32);
 474:	00 e2       	ldi	r16, 0x20	; 32
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	fc 01       	movw	r30, r24
 47c:	20 2f       	mov	r18, r16
 47e:	11 92       	st	Z+, r1
 480:	2a 95       	dec	r18
 482:	e9 f7       	brne	.-6      	; 0x47e <nrf24_send_message+0x2c>
	strcpy(temp,tx_message);
 484:	b7 01       	movw	r22, r14
 486:	0e 94 4b 03 	call	0x696	; 0x696 <strcpy>
	
	// Message length
	uint8_t length = strlen(tx_message);
 48a:	f7 01       	movw	r30, r14
 48c:	01 90       	ld	r0, Z+
 48e:	00 20       	and	r0, r0
 490:	e9 f7       	brne	.-6      	; 0x48c <nrf24_send_message+0x3a>
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	1e 2f       	mov	r17, r30
 496:	1e 19       	sub	r17, r14

	// Transmit mode
	nrf24_state(TRANSMIT);
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	0e 94 9e 01 	call	0x33c	; 0x33c <nrf24_state>

	// Flush TX/RX and clear TX interrupt
	nrf24_write(FLUSH_RX,0,0);
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	82 ee       	ldi	r24, 0xE2	; 226
 4a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	81 ee       	ldi	r24, 0xE1	; 225
 4b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	data = (1 << TX_DS);
 4ba:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <data>
	nrf24_write(STATUS,&data,1);
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	63 e5       	ldi	r22, 0x53	; 83
 4c4:	71 e0       	ldi	r23, 0x01	; 1
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	
	// Disable interrupt on RX
	nrf24_read(CONFIG,&data,1);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	63 e5       	ldi	r22, 0x53	; 83
 4d2:	71 e0       	ldi	r23, 0x01	; 1
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	data |= (1 << MASK_RX_DR);
 4da:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <data>
 4de:	80 64       	ori	r24, 0x40	; 64
 4e0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
	nrf24_write(CONFIG,&data,1);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	63 e5       	ldi	r22, 0x53	; 83
 4ea:	71 e0       	ldi	r23, 0x01	; 1
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	
	// Start SPI, load message into TX_PAYLOAD
	csn_low;
 4f2:	8b b1       	in	r24, 0x0b	; 11
 4f4:	8f 7e       	andi	r24, 0xEF	; 239
 4f6:	8b b9       	out	0x0b, r24	; 11
	if (AUTO_ACK) spi_send(W_TX_PAYLOAD);
	else spi_send(W_TX_PAYLOAD_NOACK);
 4f8:	80 eb       	ldi	r24, 0xB0	; 176
 4fa:	0e 94 40 03 	call	0x680	; 0x680 <spi_send>
 4fe:	0a c0       	rjmp	.+20     	; 0x514 <nrf24_send_message+0xc2>
	while (length--) spi_send(*(uint8_t *)tx_message++);
 500:	67 01       	movw	r12, r14
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	c8 1a       	sub	r12, r24
 506:	d8 0a       	sbc	r13, r24
 508:	f7 01       	movw	r30, r14
 50a:	80 81       	ld	r24, Z
 50c:	0e 94 40 03 	call	0x680	; 0x680 <spi_send>
 510:	10 2f       	mov	r17, r16
 512:	76 01       	movw	r14, r12
 514:	0f ef       	ldi	r16, 0xFF	; 255
 516:	01 0f       	add	r16, r17
 518:	11 11       	cpse	r17, r1
 51a:	f2 cf       	rjmp	.-28     	; 0x500 <nrf24_send_message+0xae>
	spi_send(0);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 40 03 	call	0x680	; 0x680 <spi_send>
	csn_high;
 522:	8b b1       	in	r24, 0x0b	; 11
 524:	80 61       	ori	r24, 0x10	; 16
 526:	8b b9       	out	0x0b, r24	; 11
	
	// Send message by pulling CE high for more than 10us
	ce_high;
 528:	8b b1       	in	r24, 0x0b	; 11
 52a:	80 62       	ori	r24, 0x20	; 32
 52c:	8b b9       	out	0x0b, r24	; 11
 52e:	f0 e5       	ldi	r31, 0x50	; 80
 530:	fa 95       	dec	r31
 532:	f1 f7       	brne	.-4      	; 0x530 <nrf24_send_message+0xde>
	_delay_us(15);
	ce_low;
 534:	8b b1       	in	r24, 0x0b	; 11
 536:	8f 7d       	andi	r24, 0xDF	; 223
 538:	8b b9       	out	0x0b, r24	; 11
	
	// Wait for message to be sent (TX_DS flag raised)
	nrf24_read(STATUS,&data,1);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	63 e5       	ldi	r22, 0x53	; 83
 540:	71 e0       	ldi	r23, 0x01	; 1
 542:	87 e0       	ldi	r24, 0x07	; 7
 544:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	while(!(data & (1 << TX_DS))) nrf24_read(STATUS,&data,1);
 548:	07 c0       	rjmp	.+14     	; 0x558 <nrf24_send_message+0x106>
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	63 e5       	ldi	r22, 0x53	; 83
 550:	71 e0       	ldi	r23, 0x01	; 1
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
 558:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <data>
 55c:	85 ff       	sbrs	r24, 5
 55e:	f5 cf       	rjmp	.-22     	; 0x54a <nrf24_send_message+0xf8>
	printf("Message sent: %s\n",temp);
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	9f 93       	push	r25
 566:	8f 93       	push	r24
 568:	89 e1       	ldi	r24, 0x19	; 25
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	9f 93       	push	r25
 56e:	8f 93       	push	r24
 570:	0e 94 52 03 	call	0x6a4	; 0x6a4 <printf>
	
	// Enable interrupt on RX
	nrf24_read(CONFIG,&data,1);
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	63 e5       	ldi	r22, 0x53	; 83
 57a:	71 e0       	ldi	r23, 0x01	; 1
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	data &= ~(1 << MASK_RX_DR);
 582:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <data>
 586:	8f 7b       	andi	r24, 0xBF	; 191
 588:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
	nrf24_write(CONFIG,&data,1);
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	63 e5       	ldi	r22, 0x53	; 83
 592:	71 e0       	ldi	r23, 0x01	; 1
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	
	// Continue listening
	nrf24_start_listening();
 59a:	0e 94 1c 02 	call	0x438	; 0x438 <nrf24_start_listening>
	
	return 1;
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
}
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	a0 96       	adiw	r28, 0x20	; 32
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	08 95       	ret

000005c6 <nrf24_available>:

unsigned int nrf24_available(void)
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	1f 92       	push	r1
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t config_register;
	nrf24_read(FIFO_STATUS,&config_register,1);
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	be 01       	movw	r22, r28
 5d6:	6f 5f       	subi	r22, 0xFF	; 255
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	87 e1       	ldi	r24, 0x17	; 23
 5dc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	if (!(config_register & (1 << RX_EMPTY))) return 1;
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	80 fd       	sbrc	r24, 0
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <nrf24_available+0x26>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <nrf24_available+0x2a>
	return 0;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
}
 5f0:	0f 90       	pop	r0
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <nrf24_read_message>:

const char * nrf24_read_message(void)
{
	// Message placeholder
	static char rx_message[32];
	memset(rx_message,0,32);
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	e3 e3       	ldi	r30, 0x33	; 51
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	df 01       	movw	r26, r30
 600:	1d 92       	st	X+, r1
 602:	8a 95       	dec	r24
 604:	e9 f7       	brne	.-6      	; 0x600 <nrf24_read_message+0x8>
	
	// Write ACK message
	if (AUTO_ACK) nrf24_write_ack();
	
	// Get length of incoming message
	nrf24_read(R_RX_PL_WID,&data,1);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	63 e5       	ldi	r22, 0x53	; 83
 60c:	71 e0       	ldi	r23, 0x01	; 1
 60e:	80 e6       	ldi	r24, 0x60	; 96
 610:	0e 94 e6 00 	call	0x1cc	; 0x1cc <nrf24_read>
	
	// Read message
	if (data > 0) nrf24_send_spi(R_RX_PAYLOAD,&rx_message,data+1);
 614:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <data>
 618:	44 23       	and	r20, r20
 61a:	41 f0       	breq	.+16     	; 0x62c <nrf24_read_message+0x34>
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	4f 5f       	subi	r20, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	63 e3       	ldi	r22, 0x33	; 51
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	81 e6       	ldi	r24, 0x61	; 97
 628:	0e 94 b3 00 	call	0x166	; 0x166 <nrf24_send_spi>

	// Check if there is message in array
	if (strlen(rx_message) > 0)
 62c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rx_message.2167>
 630:	88 23       	and	r24, r24
 632:	69 f0       	breq	.+26     	; 0x64e <nrf24_read_message+0x56>
	{
		// Clear RX interrupt
		data = (1 << RX_DR);
 634:	80 e4       	ldi	r24, 0x40	; 64
 636:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
		nrf24_write(STATUS,&data,1);
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	63 e5       	ldi	r22, 0x53	; 83
 640:	71 e0       	ldi	r23, 0x01	; 1
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
		
		return rx_message;
 648:	83 e3       	ldi	r24, 0x33	; 51
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	08 95       	ret
	}
	
	// Clear RX interrupt
	data = (1 << RX_DR);
 64e:	80 e4       	ldi	r24, 0x40	; 64
 650:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <data>
	nrf24_write(STATUS,&data,1);
 654:	41 e0       	ldi	r20, 0x01	; 1
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	63 e5       	ldi	r22, 0x53	; 83
 65a:	71 e0       	ldi	r23, 0x01	; 1
 65c:	87 e0       	ldi	r24, 0x07	; 7
 65e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <nrf24_write>
	
	return "failed";
 662:	8b e2       	ldi	r24, 0x2B	; 43
 664:	91 e0       	ldi	r25, 0x01	; 1
}
 666:	08 95       	ret

00000668 <spi_master_init>:
	while ( count-- ) {
		SPDR = *send_buffer++;
		loop_until_bit_is_set(SPSR, SPIF);
		*receive_buffer++ = SPDR;
	}
}
 668:	84 b1       	in	r24, 0x04	; 4
 66a:	8f 7e       	andi	r24, 0xEF	; 239
 66c:	84 b9       	out	0x04, r24	; 4
 66e:	84 b1       	in	r24, 0x04	; 4
 670:	88 62       	ori	r24, 0x28	; 40
 672:	84 b9       	out	0x04, r24	; 4
 674:	80 e5       	ldi	r24, 0x50	; 80
 676:	8c bd       	out	0x2c, r24	; 44
 678:	8d b5       	in	r24, 0x2d	; 45
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	8d bd       	out	0x2d, r24	; 45
 67e:	08 95       	ret

00000680 <spi_send>:
 680:	8e bd       	out	0x2e, r24	; 46
 682:	0d b4       	in	r0, 0x2d	; 45
 684:	07 fe       	sbrs	r0, 7
 686:	fd cf       	rjmp	.-6      	; 0x682 <spi_send+0x2>
 688:	08 95       	ret

0000068a <spi_exchange>:

uint8_t spi_exchange( uint8_t send_data )
{
	SPDR = send_data;
 68a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
 68c:	0d b4       	in	r0, 0x2d	; 45
 68e:	07 fe       	sbrs	r0, 7
 690:	fd cf       	rjmp	.-6      	; 0x68c <spi_exchange+0x2>
	return SPDR;
 692:	8e b5       	in	r24, 0x2e	; 46
}
 694:	08 95       	ret

00000696 <strcpy>:
 696:	fb 01       	movw	r30, r22
 698:	dc 01       	movw	r26, r24
 69a:	01 90       	ld	r0, Z+
 69c:	0d 92       	st	X+, r0
 69e:	00 20       	and	r0, r0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <strcpy+0x4>
 6a2:	08 95       	ret

000006a4 <printf>:
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e5       	ldi	r30, 0x58	; 88
 6aa:	f3 e0       	ldi	r31, 0x03	; 3
 6ac:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__prologue_saves__+0x20>
 6b0:	ae 01       	movw	r20, r28
 6b2:	4b 5f       	subi	r20, 0xFB	; 251
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
 6b6:	fa 01       	movw	r30, r20
 6b8:	61 91       	ld	r22, Z+
 6ba:	71 91       	ld	r23, Z+
 6bc:	af 01       	movw	r20, r30
 6be:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__iob+0x2>
 6c2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__iob+0x3>
 6c6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vfprintf>
 6ca:	e2 e0       	ldi	r30, 0x02	; 2
 6cc:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__epilogue_restores__+0x20>

000006d0 <vfprintf>:
 6d0:	ab e0       	ldi	r26, 0x0B	; 11
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	ee e6       	ldi	r30, 0x6E	; 110
 6d6:	f3 e0       	ldi	r31, 0x03	; 3
 6d8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__prologue_saves__>
 6dc:	6c 01       	movw	r12, r24
 6de:	7b 01       	movw	r14, r22
 6e0:	8a 01       	movw	r16, r20
 6e2:	fc 01       	movw	r30, r24
 6e4:	17 82       	std	Z+7, r1	; 0x07
 6e6:	16 82       	std	Z+6, r1	; 0x06
 6e8:	83 81       	ldd	r24, Z+3	; 0x03
 6ea:	81 ff       	sbrs	r24, 1
 6ec:	cc c1       	rjmp	.+920    	; 0xa86 <__stack+0x187>
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	3c 01       	movw	r6, r24
 6f4:	f6 01       	movw	r30, r12
 6f6:	93 81       	ldd	r25, Z+3	; 0x03
 6f8:	f7 01       	movw	r30, r14
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	7f 01       	movw	r14, r30
 704:	88 23       	and	r24, r24
 706:	09 f4       	brne	.+2      	; 0x70a <vfprintf+0x3a>
 708:	ba c1       	rjmp	.+884    	; 0xa7e <__stack+0x17f>
 70a:	85 32       	cpi	r24, 0x25	; 37
 70c:	39 f4       	brne	.+14     	; 0x71c <vfprintf+0x4c>
 70e:	93 fd       	sbrc	r25, 3
 710:	85 91       	lpm	r24, Z+
 712:	93 ff       	sbrs	r25, 3
 714:	81 91       	ld	r24, Z+
 716:	7f 01       	movw	r14, r30
 718:	85 32       	cpi	r24, 0x25	; 37
 71a:	29 f4       	brne	.+10     	; 0x726 <vfprintf+0x56>
 71c:	b6 01       	movw	r22, r12
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 724:	e7 cf       	rjmp	.-50     	; 0x6f4 <vfprintf+0x24>
 726:	91 2c       	mov	r9, r1
 728:	21 2c       	mov	r2, r1
 72a:	31 2c       	mov	r3, r1
 72c:	ff e1       	ldi	r31, 0x1F	; 31
 72e:	f3 15       	cp	r31, r3
 730:	d8 f0       	brcs	.+54     	; 0x768 <vfprintf+0x98>
 732:	8b 32       	cpi	r24, 0x2B	; 43
 734:	79 f0       	breq	.+30     	; 0x754 <vfprintf+0x84>
 736:	38 f4       	brcc	.+14     	; 0x746 <vfprintf+0x76>
 738:	80 32       	cpi	r24, 0x20	; 32
 73a:	79 f0       	breq	.+30     	; 0x75a <vfprintf+0x8a>
 73c:	83 32       	cpi	r24, 0x23	; 35
 73e:	a1 f4       	brne	.+40     	; 0x768 <vfprintf+0x98>
 740:	23 2d       	mov	r18, r3
 742:	20 61       	ori	r18, 0x10	; 16
 744:	1d c0       	rjmp	.+58     	; 0x780 <vfprintf+0xb0>
 746:	8d 32       	cpi	r24, 0x2D	; 45
 748:	61 f0       	breq	.+24     	; 0x762 <vfprintf+0x92>
 74a:	80 33       	cpi	r24, 0x30	; 48
 74c:	69 f4       	brne	.+26     	; 0x768 <vfprintf+0x98>
 74e:	23 2d       	mov	r18, r3
 750:	21 60       	ori	r18, 0x01	; 1
 752:	16 c0       	rjmp	.+44     	; 0x780 <vfprintf+0xb0>
 754:	83 2d       	mov	r24, r3
 756:	82 60       	ori	r24, 0x02	; 2
 758:	38 2e       	mov	r3, r24
 75a:	e3 2d       	mov	r30, r3
 75c:	e4 60       	ori	r30, 0x04	; 4
 75e:	3e 2e       	mov	r3, r30
 760:	2a c0       	rjmp	.+84     	; 0x7b6 <vfprintf+0xe6>
 762:	f3 2d       	mov	r31, r3
 764:	f8 60       	ori	r31, 0x08	; 8
 766:	1d c0       	rjmp	.+58     	; 0x7a2 <vfprintf+0xd2>
 768:	37 fc       	sbrc	r3, 7
 76a:	2d c0       	rjmp	.+90     	; 0x7c6 <vfprintf+0xf6>
 76c:	20 ed       	ldi	r18, 0xD0	; 208
 76e:	28 0f       	add	r18, r24
 770:	2a 30       	cpi	r18, 0x0A	; 10
 772:	40 f0       	brcs	.+16     	; 0x784 <vfprintf+0xb4>
 774:	8e 32       	cpi	r24, 0x2E	; 46
 776:	b9 f4       	brne	.+46     	; 0x7a6 <vfprintf+0xd6>
 778:	36 fc       	sbrc	r3, 6
 77a:	81 c1       	rjmp	.+770    	; 0xa7e <__stack+0x17f>
 77c:	23 2d       	mov	r18, r3
 77e:	20 64       	ori	r18, 0x40	; 64
 780:	32 2e       	mov	r3, r18
 782:	19 c0       	rjmp	.+50     	; 0x7b6 <vfprintf+0xe6>
 784:	36 fe       	sbrs	r3, 6
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0xc4>
 788:	8a e0       	ldi	r24, 0x0A	; 10
 78a:	98 9e       	mul	r9, r24
 78c:	20 0d       	add	r18, r0
 78e:	11 24       	eor	r1, r1
 790:	92 2e       	mov	r9, r18
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <vfprintf+0xe6>
 794:	ea e0       	ldi	r30, 0x0A	; 10
 796:	2e 9e       	mul	r2, r30
 798:	20 0d       	add	r18, r0
 79a:	11 24       	eor	r1, r1
 79c:	22 2e       	mov	r2, r18
 79e:	f3 2d       	mov	r31, r3
 7a0:	f0 62       	ori	r31, 0x20	; 32
 7a2:	3f 2e       	mov	r3, r31
 7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <vfprintf+0xe6>
 7a6:	8c 36       	cpi	r24, 0x6C	; 108
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <vfprintf+0xe2>
 7aa:	83 2d       	mov	r24, r3
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	38 2e       	mov	r3, r24
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0xe6>
 7b2:	88 36       	cpi	r24, 0x68	; 104
 7b4:	41 f4       	brne	.+16     	; 0x7c6 <vfprintf+0xf6>
 7b6:	f7 01       	movw	r30, r14
 7b8:	93 fd       	sbrc	r25, 3
 7ba:	85 91       	lpm	r24, Z+
 7bc:	93 ff       	sbrs	r25, 3
 7be:	81 91       	ld	r24, Z+
 7c0:	7f 01       	movw	r14, r30
 7c2:	81 11       	cpse	r24, r1
 7c4:	b3 cf       	rjmp	.-154    	; 0x72c <vfprintf+0x5c>
 7c6:	98 2f       	mov	r25, r24
 7c8:	9f 7d       	andi	r25, 0xDF	; 223
 7ca:	95 54       	subi	r25, 0x45	; 69
 7cc:	93 30       	cpi	r25, 0x03	; 3
 7ce:	28 f4       	brcc	.+10     	; 0x7da <vfprintf+0x10a>
 7d0:	0c 5f       	subi	r16, 0xFC	; 252
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	9f e3       	ldi	r25, 0x3F	; 63
 7d6:	99 83       	std	Y+1, r25	; 0x01
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <vfprintf+0x124>
 7da:	83 36       	cpi	r24, 0x63	; 99
 7dc:	31 f0       	breq	.+12     	; 0x7ea <vfprintf+0x11a>
 7de:	83 37       	cpi	r24, 0x73	; 115
 7e0:	71 f0       	breq	.+28     	; 0x7fe <vfprintf+0x12e>
 7e2:	83 35       	cpi	r24, 0x53	; 83
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <vfprintf+0x118>
 7e6:	59 c0       	rjmp	.+178    	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 7e8:	21 c0       	rjmp	.+66     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7ea:	f8 01       	movw	r30, r16
 7ec:	80 81       	ld	r24, Z
 7ee:	89 83       	std	Y+1, r24	; 0x01
 7f0:	0e 5f       	subi	r16, 0xFE	; 254
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	88 24       	eor	r8, r8
 7f6:	83 94       	inc	r8
 7f8:	91 2c       	mov	r9, r1
 7fa:	53 01       	movw	r10, r6
 7fc:	13 c0       	rjmp	.+38     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7fe:	28 01       	movw	r4, r16
 800:	f2 e0       	ldi	r31, 0x02	; 2
 802:	4f 0e       	add	r4, r31
 804:	51 1c       	adc	r5, r1
 806:	f8 01       	movw	r30, r16
 808:	a0 80       	ld	r10, Z
 80a:	b1 80       	ldd	r11, Z+1	; 0x01
 80c:	36 fe       	sbrs	r3, 6
 80e:	03 c0       	rjmp	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	69 2d       	mov	r22, r9
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	6f ef       	ldi	r22, 0xFF	; 255
 818:	7f ef       	ldi	r23, 0xFF	; 255
 81a:	c5 01       	movw	r24, r10
 81c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <strnlen>
 820:	4c 01       	movw	r8, r24
 822:	82 01       	movw	r16, r4
 824:	f3 2d       	mov	r31, r3
 826:	ff 77       	andi	r31, 0x7F	; 127
 828:	3f 2e       	mov	r3, r31
 82a:	16 c0       	rjmp	.+44     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 82c:	28 01       	movw	r4, r16
 82e:	22 e0       	ldi	r18, 0x02	; 2
 830:	42 0e       	add	r4, r18
 832:	51 1c       	adc	r5, r1
 834:	f8 01       	movw	r30, r16
 836:	a0 80       	ld	r10, Z
 838:	b1 80       	ldd	r11, Z+1	; 0x01
 83a:	36 fe       	sbrs	r3, 6
 83c:	03 c0       	rjmp	.+6      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83e:	69 2d       	mov	r22, r9
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	6f ef       	ldi	r22, 0xFF	; 255
 846:	7f ef       	ldi	r23, 0xFF	; 255
 848:	c5 01       	movw	r24, r10
 84a:	0e 94 49 05 	call	0xa92	; 0xa92 <strnlen_P>
 84e:	4c 01       	movw	r8, r24
 850:	f3 2d       	mov	r31, r3
 852:	f0 68       	ori	r31, 0x80	; 128
 854:	3f 2e       	mov	r3, r31
 856:	82 01       	movw	r16, r4
 858:	33 fc       	sbrc	r3, 3
 85a:	1b c0       	rjmp	.+54     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 85c:	82 2d       	mov	r24, r2
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	88 16       	cp	r8, r24
 862:	99 06       	cpc	r9, r25
 864:	b0 f4       	brcc	.+44     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 870:	2a 94       	dec	r2
 872:	f4 cf       	rjmp	.-24     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 874:	f5 01       	movw	r30, r10
 876:	37 fc       	sbrc	r3, 7
 878:	85 91       	lpm	r24, Z+
 87a:	37 fe       	sbrs	r3, 7
 87c:	81 91       	ld	r24, Z+
 87e:	5f 01       	movw	r10, r30
 880:	b6 01       	movw	r22, r12
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 888:	21 10       	cpse	r2, r1
 88a:	2a 94       	dec	r2
 88c:	21 e0       	ldi	r18, 0x01	; 1
 88e:	82 1a       	sub	r8, r18
 890:	91 08       	sbc	r9, r1
 892:	81 14       	cp	r8, r1
 894:	91 04       	cpc	r9, r1
 896:	71 f7       	brne	.-36     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 898:	e8 c0       	rjmp	.+464    	; 0xa6a <__stack+0x16b>
 89a:	84 36       	cpi	r24, 0x64	; 100
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89e:	89 36       	cpi	r24, 0x69	; 105
 8a0:	41 f5       	brne	.+80     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8a2:	f8 01       	movw	r30, r16
 8a4:	37 fe       	sbrs	r3, 7
 8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8a8:	60 81       	ld	r22, Z
 8aa:	71 81       	ldd	r23, Z+1	; 0x01
 8ac:	82 81       	ldd	r24, Z+2	; 0x02
 8ae:	93 81       	ldd	r25, Z+3	; 0x03
 8b0:	0c 5f       	subi	r16, 0xFC	; 252
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8b6:	60 81       	ld	r22, Z
 8b8:	71 81       	ldd	r23, Z+1	; 0x01
 8ba:	07 2e       	mov	r0, r23
 8bc:	00 0c       	add	r0, r0
 8be:	88 0b       	sbc	r24, r24
 8c0:	99 0b       	sbc	r25, r25
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	f3 2d       	mov	r31, r3
 8c8:	ff 76       	andi	r31, 0x6F	; 111
 8ca:	3f 2e       	mov	r3, r31
 8cc:	97 ff       	sbrs	r25, 7
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	f0 68       	ori	r31, 0x80	; 128
 8e0:	3f 2e       	mov	r3, r31
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	a3 01       	movw	r20, r6
 8e8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__ultoa_invert>
 8ec:	88 2e       	mov	r8, r24
 8ee:	86 18       	sub	r8, r6
 8f0:	45 c0       	rjmp	.+138    	; 0x97c <__stack+0x7d>
 8f2:	85 37       	cpi	r24, 0x75	; 117
 8f4:	31 f4       	brne	.+12     	; 0x902 <__stack+0x3>
 8f6:	23 2d       	mov	r18, r3
 8f8:	2f 7e       	andi	r18, 0xEF	; 239
 8fa:	b2 2e       	mov	r11, r18
 8fc:	2a e0       	ldi	r18, 0x0A	; 10
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	25 c0       	rjmp	.+74     	; 0x94c <__stack+0x4d>
 902:	93 2d       	mov	r25, r3
 904:	99 7f       	andi	r25, 0xF9	; 249
 906:	b9 2e       	mov	r11, r25
 908:	8f 36       	cpi	r24, 0x6F	; 111
 90a:	c1 f0       	breq	.+48     	; 0x93c <__stack+0x3d>
 90c:	18 f4       	brcc	.+6      	; 0x914 <__stack+0x15>
 90e:	88 35       	cpi	r24, 0x58	; 88
 910:	79 f0       	breq	.+30     	; 0x930 <__stack+0x31>
 912:	b5 c0       	rjmp	.+362    	; 0xa7e <__stack+0x17f>
 914:	80 37       	cpi	r24, 0x70	; 112
 916:	19 f0       	breq	.+6      	; 0x91e <__stack+0x1f>
 918:	88 37       	cpi	r24, 0x78	; 120
 91a:	21 f0       	breq	.+8      	; 0x924 <__stack+0x25>
 91c:	b0 c0       	rjmp	.+352    	; 0xa7e <__stack+0x17f>
 91e:	e9 2f       	mov	r30, r25
 920:	e0 61       	ori	r30, 0x10	; 16
 922:	be 2e       	mov	r11, r30
 924:	b4 fe       	sbrs	r11, 4
 926:	0d c0       	rjmp	.+26     	; 0x942 <__stack+0x43>
 928:	fb 2d       	mov	r31, r11
 92a:	f4 60       	ori	r31, 0x04	; 4
 92c:	bf 2e       	mov	r11, r31
 92e:	09 c0       	rjmp	.+18     	; 0x942 <__stack+0x43>
 930:	34 fe       	sbrs	r3, 4
 932:	0a c0       	rjmp	.+20     	; 0x948 <__stack+0x49>
 934:	29 2f       	mov	r18, r25
 936:	26 60       	ori	r18, 0x06	; 6
 938:	b2 2e       	mov	r11, r18
 93a:	06 c0       	rjmp	.+12     	; 0x948 <__stack+0x49>
 93c:	28 e0       	ldi	r18, 0x08	; 8
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0x4d>
 942:	20 e1       	ldi	r18, 0x10	; 16
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	20 e1       	ldi	r18, 0x10	; 16
 94a:	32 e0       	ldi	r19, 0x02	; 2
 94c:	f8 01       	movw	r30, r16
 94e:	b7 fe       	sbrs	r11, 7
 950:	07 c0       	rjmp	.+14     	; 0x960 <__stack+0x61>
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	06 c0       	rjmp	.+12     	; 0x96c <__stack+0x6d>
 960:	60 81       	ld	r22, Z
 962:	71 81       	ldd	r23, Z+1	; 0x01
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 5f       	subi	r16, 0xFE	; 254
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	a3 01       	movw	r20, r6
 96e:	0e 94 9b 05 	call	0xb36	; 0xb36 <__ultoa_invert>
 972:	88 2e       	mov	r8, r24
 974:	86 18       	sub	r8, r6
 976:	fb 2d       	mov	r31, r11
 978:	ff 77       	andi	r31, 0x7F	; 127
 97a:	3f 2e       	mov	r3, r31
 97c:	36 fe       	sbrs	r3, 6
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__stack+0x9b>
 980:	23 2d       	mov	r18, r3
 982:	2e 7f       	andi	r18, 0xFE	; 254
 984:	a2 2e       	mov	r10, r18
 986:	89 14       	cp	r8, r9
 988:	58 f4       	brcc	.+22     	; 0x9a0 <__stack+0xa1>
 98a:	34 fe       	sbrs	r3, 4
 98c:	0b c0       	rjmp	.+22     	; 0x9a4 <__stack+0xa5>
 98e:	32 fc       	sbrc	r3, 2
 990:	09 c0       	rjmp	.+18     	; 0x9a4 <__stack+0xa5>
 992:	83 2d       	mov	r24, r3
 994:	8e 7e       	andi	r24, 0xEE	; 238
 996:	a8 2e       	mov	r10, r24
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <__stack+0xa5>
 99a:	b8 2c       	mov	r11, r8
 99c:	a3 2c       	mov	r10, r3
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <__stack+0xa7>
 9a0:	b8 2c       	mov	r11, r8
 9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__stack+0xa7>
 9a4:	b9 2c       	mov	r11, r9
 9a6:	a4 fe       	sbrs	r10, 4
 9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <__stack+0xc9>
 9aa:	fe 01       	movw	r30, r28
 9ac:	e8 0d       	add	r30, r8
 9ae:	f1 1d       	adc	r31, r1
 9b0:	80 81       	ld	r24, Z
 9b2:	80 33       	cpi	r24, 0x30	; 48
 9b4:	21 f4       	brne	.+8      	; 0x9be <__stack+0xbf>
 9b6:	9a 2d       	mov	r25, r10
 9b8:	99 7e       	andi	r25, 0xE9	; 233
 9ba:	a9 2e       	mov	r10, r25
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__stack+0xd1>
 9be:	a2 fe       	sbrs	r10, 2
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <__stack+0xcf>
 9c2:	b3 94       	inc	r11
 9c4:	b3 94       	inc	r11
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__stack+0xd1>
 9c8:	8a 2d       	mov	r24, r10
 9ca:	86 78       	andi	r24, 0x86	; 134
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <__stack+0xd1>
 9ce:	b3 94       	inc	r11
 9d0:	a3 fc       	sbrc	r10, 3
 9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <__stack+0xf7>
 9d4:	a0 fe       	sbrs	r10, 0
 9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <__stack+0xe5>
 9d8:	b2 14       	cp	r11, r2
 9da:	88 f4       	brcc	.+34     	; 0x9fe <__stack+0xff>
 9dc:	28 0c       	add	r2, r8
 9de:	92 2c       	mov	r9, r2
 9e0:	9b 18       	sub	r9, r11
 9e2:	0e c0       	rjmp	.+28     	; 0xa00 <__stack+0x101>
 9e4:	b2 14       	cp	r11, r2
 9e6:	60 f4       	brcc	.+24     	; 0xa00 <__stack+0x101>
 9e8:	b6 01       	movw	r22, r12
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 9f2:	b3 94       	inc	r11
 9f4:	f7 cf       	rjmp	.-18     	; 0x9e4 <__stack+0xe5>
 9f6:	b2 14       	cp	r11, r2
 9f8:	18 f4       	brcc	.+6      	; 0xa00 <__stack+0x101>
 9fa:	2b 18       	sub	r2, r11
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__stack+0x103>
 9fe:	98 2c       	mov	r9, r8
 a00:	21 2c       	mov	r2, r1
 a02:	a4 fe       	sbrs	r10, 4
 a04:	10 c0       	rjmp	.+32     	; 0xa26 <__stack+0x127>
 a06:	b6 01       	movw	r22, r12
 a08:	80 e3       	ldi	r24, 0x30	; 48
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 a10:	a2 fe       	sbrs	r10, 2
 a12:	17 c0       	rjmp	.+46     	; 0xa42 <__stack+0x143>
 a14:	a1 fc       	sbrc	r10, 1
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <__stack+0x11f>
 a18:	88 e7       	ldi	r24, 0x78	; 120
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x123>
 a1e:	88 e5       	ldi	r24, 0x58	; 88
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	b6 01       	movw	r22, r12
 a24:	0c c0       	rjmp	.+24     	; 0xa3e <__stack+0x13f>
 a26:	8a 2d       	mov	r24, r10
 a28:	86 78       	andi	r24, 0x86	; 134
 a2a:	59 f0       	breq	.+22     	; 0xa42 <__stack+0x143>
 a2c:	a1 fe       	sbrs	r10, 1
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <__stack+0x135>
 a30:	8b e2       	ldi	r24, 0x2B	; 43
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <__stack+0x137>
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	a7 fc       	sbrc	r10, 7
 a38:	8d e2       	ldi	r24, 0x2D	; 45
 a3a:	b6 01       	movw	r22, r12
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 a42:	89 14       	cp	r8, r9
 a44:	38 f4       	brcc	.+14     	; 0xa54 <__stack+0x155>
 a46:	b6 01       	movw	r22, r12
 a48:	80 e3       	ldi	r24, 0x30	; 48
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 a50:	9a 94       	dec	r9
 a52:	f7 cf       	rjmp	.-18     	; 0xa42 <__stack+0x143>
 a54:	8a 94       	dec	r8
 a56:	f3 01       	movw	r30, r6
 a58:	e8 0d       	add	r30, r8
 a5a:	f1 1d       	adc	r31, r1
 a5c:	80 81       	ld	r24, Z
 a5e:	b6 01       	movw	r22, r12
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 a66:	81 10       	cpse	r8, r1
 a68:	f5 cf       	rjmp	.-22     	; 0xa54 <__stack+0x155>
 a6a:	22 20       	and	r2, r2
 a6c:	09 f4       	brne	.+2      	; 0xa70 <__stack+0x171>
 a6e:	42 ce       	rjmp	.-892    	; 0x6f4 <vfprintf+0x24>
 a70:	b6 01       	movw	r22, r12
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 5f 05 	call	0xabe	; 0xabe <fputc>
 a7a:	2a 94       	dec	r2
 a7c:	f6 cf       	rjmp	.-20     	; 0xa6a <__stack+0x16b>
 a7e:	f6 01       	movw	r30, r12
 a80:	86 81       	ldd	r24, Z+6	; 0x06
 a82:	97 81       	ldd	r25, Z+7	; 0x07
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	2b 96       	adiw	r28, 0x0b	; 11
 a8c:	e2 e1       	ldi	r30, 0x12	; 18
 a8e:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__epilogue_restores__>

00000a92 <strnlen_P>:
 a92:	fc 01       	movw	r30, r24
 a94:	05 90       	lpm	r0, Z+
 a96:	61 50       	subi	r22, 0x01	; 1
 a98:	70 40       	sbci	r23, 0x00	; 0
 a9a:	01 10       	cpse	r0, r1
 a9c:	d8 f7       	brcc	.-10     	; 0xa94 <strnlen_P+0x2>
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	8e 0f       	add	r24, r30
 aa4:	9f 1f       	adc	r25, r31
 aa6:	08 95       	ret

00000aa8 <strnlen>:
 aa8:	fc 01       	movw	r30, r24
 aaa:	61 50       	subi	r22, 0x01	; 1
 aac:	70 40       	sbci	r23, 0x00	; 0
 aae:	01 90       	ld	r0, Z+
 ab0:	01 10       	cpse	r0, r1
 ab2:	d8 f7       	brcc	.-10     	; 0xaaa <strnlen+0x2>
 ab4:	80 95       	com	r24
 ab6:	90 95       	com	r25
 ab8:	8e 0f       	add	r24, r30
 aba:	9f 1f       	adc	r25, r31
 abc:	08 95       	ret

00000abe <fputc>:
 abe:	0f 93       	push	r16
 ac0:	1f 93       	push	r17
 ac2:	cf 93       	push	r28
 ac4:	df 93       	push	r29
 ac6:	fb 01       	movw	r30, r22
 ac8:	23 81       	ldd	r18, Z+3	; 0x03
 aca:	21 fd       	sbrc	r18, 1
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <fputc+0x16>
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	9f ef       	ldi	r25, 0xFF	; 255
 ad2:	2c c0       	rjmp	.+88     	; 0xb2c <fputc+0x6e>
 ad4:	22 ff       	sbrs	r18, 2
 ad6:	16 c0       	rjmp	.+44     	; 0xb04 <fputc+0x46>
 ad8:	46 81       	ldd	r20, Z+6	; 0x06
 ada:	57 81       	ldd	r21, Z+7	; 0x07
 adc:	24 81       	ldd	r18, Z+4	; 0x04
 ade:	35 81       	ldd	r19, Z+5	; 0x05
 ae0:	42 17       	cp	r20, r18
 ae2:	53 07       	cpc	r21, r19
 ae4:	44 f4       	brge	.+16     	; 0xaf6 <fputc+0x38>
 ae6:	a0 81       	ld	r26, Z
 ae8:	b1 81       	ldd	r27, Z+1	; 0x01
 aea:	9d 01       	movw	r18, r26
 aec:	2f 5f       	subi	r18, 0xFF	; 255
 aee:	3f 4f       	sbci	r19, 0xFF	; 255
 af0:	31 83       	std	Z+1, r19	; 0x01
 af2:	20 83       	st	Z, r18
 af4:	8c 93       	st	X, r24
 af6:	26 81       	ldd	r18, Z+6	; 0x06
 af8:	37 81       	ldd	r19, Z+7	; 0x07
 afa:	2f 5f       	subi	r18, 0xFF	; 255
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	37 83       	std	Z+7, r19	; 0x07
 b00:	26 83       	std	Z+6, r18	; 0x06
 b02:	14 c0       	rjmp	.+40     	; 0xb2c <fputc+0x6e>
 b04:	8b 01       	movw	r16, r22
 b06:	ec 01       	movw	r28, r24
 b08:	fb 01       	movw	r30, r22
 b0a:	00 84       	ldd	r0, Z+8	; 0x08
 b0c:	f1 85       	ldd	r31, Z+9	; 0x09
 b0e:	e0 2d       	mov	r30, r0
 b10:	09 95       	icall
 b12:	89 2b       	or	r24, r25
 b14:	e1 f6       	brne	.-72     	; 0xace <fputc+0x10>
 b16:	d8 01       	movw	r26, r16
 b18:	16 96       	adiw	r26, 0x06	; 6
 b1a:	8d 91       	ld	r24, X+
 b1c:	9c 91       	ld	r25, X
 b1e:	17 97       	sbiw	r26, 0x07	; 7
 b20:	01 96       	adiw	r24, 0x01	; 1
 b22:	17 96       	adiw	r26, 0x07	; 7
 b24:	9c 93       	st	X, r25
 b26:	8e 93       	st	-X, r24
 b28:	16 97       	sbiw	r26, 0x06	; 6
 b2a:	ce 01       	movw	r24, r28
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	08 95       	ret

00000b36 <__ultoa_invert>:
 b36:	fa 01       	movw	r30, r20
 b38:	aa 27       	eor	r26, r26
 b3a:	28 30       	cpi	r18, 0x08	; 8
 b3c:	51 f1       	breq	.+84     	; 0xb92 <__ultoa_invert+0x5c>
 b3e:	20 31       	cpi	r18, 0x10	; 16
 b40:	81 f1       	breq	.+96     	; 0xba2 <__ultoa_invert+0x6c>
 b42:	e8 94       	clt
 b44:	6f 93       	push	r22
 b46:	6e 7f       	andi	r22, 0xFE	; 254
 b48:	6e 5f       	subi	r22, 0xFE	; 254
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	af 4f       	sbci	r26, 0xFF	; 255
 b52:	b1 e0       	ldi	r27, 0x01	; 1
 b54:	3e d0       	rcall	.+124    	; 0xbd2 <__ultoa_invert+0x9c>
 b56:	b4 e0       	ldi	r27, 0x04	; 4
 b58:	3c d0       	rcall	.+120    	; 0xbd2 <__ultoa_invert+0x9c>
 b5a:	67 0f       	add	r22, r23
 b5c:	78 1f       	adc	r23, r24
 b5e:	89 1f       	adc	r24, r25
 b60:	9a 1f       	adc	r25, r26
 b62:	a1 1d       	adc	r26, r1
 b64:	68 0f       	add	r22, r24
 b66:	79 1f       	adc	r23, r25
 b68:	8a 1f       	adc	r24, r26
 b6a:	91 1d       	adc	r25, r1
 b6c:	a1 1d       	adc	r26, r1
 b6e:	6a 0f       	add	r22, r26
 b70:	71 1d       	adc	r23, r1
 b72:	81 1d       	adc	r24, r1
 b74:	91 1d       	adc	r25, r1
 b76:	a1 1d       	adc	r26, r1
 b78:	20 d0       	rcall	.+64     	; 0xbba <__ultoa_invert+0x84>
 b7a:	09 f4       	brne	.+2      	; 0xb7e <__ultoa_invert+0x48>
 b7c:	68 94       	set
 b7e:	3f 91       	pop	r19
 b80:	2a e0       	ldi	r18, 0x0A	; 10
 b82:	26 9f       	mul	r18, r22
 b84:	11 24       	eor	r1, r1
 b86:	30 19       	sub	r19, r0
 b88:	30 5d       	subi	r19, 0xD0	; 208
 b8a:	31 93       	st	Z+, r19
 b8c:	de f6       	brtc	.-74     	; 0xb44 <__ultoa_invert+0xe>
 b8e:	cf 01       	movw	r24, r30
 b90:	08 95       	ret
 b92:	46 2f       	mov	r20, r22
 b94:	47 70       	andi	r20, 0x07	; 7
 b96:	40 5d       	subi	r20, 0xD0	; 208
 b98:	41 93       	st	Z+, r20
 b9a:	b3 e0       	ldi	r27, 0x03	; 3
 b9c:	0f d0       	rcall	.+30     	; 0xbbc <__ultoa_invert+0x86>
 b9e:	c9 f7       	brne	.-14     	; 0xb92 <__ultoa_invert+0x5c>
 ba0:	f6 cf       	rjmp	.-20     	; 0xb8e <__ultoa_invert+0x58>
 ba2:	46 2f       	mov	r20, r22
 ba4:	4f 70       	andi	r20, 0x0F	; 15
 ba6:	40 5d       	subi	r20, 0xD0	; 208
 ba8:	4a 33       	cpi	r20, 0x3A	; 58
 baa:	18 f0       	brcs	.+6      	; 0xbb2 <__ultoa_invert+0x7c>
 bac:	49 5d       	subi	r20, 0xD9	; 217
 bae:	31 fd       	sbrc	r19, 1
 bb0:	40 52       	subi	r20, 0x20	; 32
 bb2:	41 93       	st	Z+, r20
 bb4:	02 d0       	rcall	.+4      	; 0xbba <__ultoa_invert+0x84>
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__ultoa_invert+0x6c>
 bb8:	ea cf       	rjmp	.-44     	; 0xb8e <__ultoa_invert+0x58>
 bba:	b4 e0       	ldi	r27, 0x04	; 4
 bbc:	a6 95       	lsr	r26
 bbe:	97 95       	ror	r25
 bc0:	87 95       	ror	r24
 bc2:	77 95       	ror	r23
 bc4:	67 95       	ror	r22
 bc6:	ba 95       	dec	r27
 bc8:	c9 f7       	brne	.-14     	; 0xbbc <__ultoa_invert+0x86>
 bca:	00 97       	sbiw	r24, 0x00	; 0
 bcc:	61 05       	cpc	r22, r1
 bce:	71 05       	cpc	r23, r1
 bd0:	08 95       	ret
 bd2:	9b 01       	movw	r18, r22
 bd4:	ac 01       	movw	r20, r24
 bd6:	0a 2e       	mov	r0, r26
 bd8:	06 94       	lsr	r0
 bda:	57 95       	ror	r21
 bdc:	47 95       	ror	r20
 bde:	37 95       	ror	r19
 be0:	27 95       	ror	r18
 be2:	ba 95       	dec	r27
 be4:	c9 f7       	brne	.-14     	; 0xbd8 <__ultoa_invert+0xa2>
 be6:	62 0f       	add	r22, r18
 be8:	73 1f       	adc	r23, r19
 bea:	84 1f       	adc	r24, r20
 bec:	95 1f       	adc	r25, r21
 bee:	a0 1d       	adc	r26, r0
 bf0:	08 95       	ret

00000bf2 <__prologue_saves__>:
 bf2:	2f 92       	push	r2
 bf4:	3f 92       	push	r3
 bf6:	4f 92       	push	r4
 bf8:	5f 92       	push	r5
 bfa:	6f 92       	push	r6
 bfc:	7f 92       	push	r7
 bfe:	8f 92       	push	r8
 c00:	9f 92       	push	r9
 c02:	af 92       	push	r10
 c04:	bf 92       	push	r11
 c06:	cf 92       	push	r12
 c08:	df 92       	push	r13
 c0a:	ef 92       	push	r14
 c0c:	ff 92       	push	r15
 c0e:	0f 93       	push	r16
 c10:	1f 93       	push	r17
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	ca 1b       	sub	r28, r26
 c1c:	db 0b       	sbc	r29, r27
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
 c28:	09 94       	ijmp

00000c2a <__epilogue_restores__>:
 c2a:	2a 88       	ldd	r2, Y+18	; 0x12
 c2c:	39 88       	ldd	r3, Y+17	; 0x11
 c2e:	48 88       	ldd	r4, Y+16	; 0x10
 c30:	5f 84       	ldd	r5, Y+15	; 0x0f
 c32:	6e 84       	ldd	r6, Y+14	; 0x0e
 c34:	7d 84       	ldd	r7, Y+13	; 0x0d
 c36:	8c 84       	ldd	r8, Y+12	; 0x0c
 c38:	9b 84       	ldd	r9, Y+11	; 0x0b
 c3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c3c:	b9 84       	ldd	r11, Y+9	; 0x09
 c3e:	c8 84       	ldd	r12, Y+8	; 0x08
 c40:	df 80       	ldd	r13, Y+7	; 0x07
 c42:	ee 80       	ldd	r14, Y+6	; 0x06
 c44:	fd 80       	ldd	r15, Y+5	; 0x05
 c46:	0c 81       	ldd	r16, Y+4	; 0x04
 c48:	1b 81       	ldd	r17, Y+3	; 0x03
 c4a:	aa 81       	ldd	r26, Y+2	; 0x02
 c4c:	b9 81       	ldd	r27, Y+1	; 0x01
 c4e:	ce 0f       	add	r28, r30
 c50:	d1 1d       	adc	r29, r1
 c52:	0f b6       	in	r0, 0x3f	; 63
 c54:	f8 94       	cli
 c56:	de bf       	out	0x3e, r29	; 62
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	cd bf       	out	0x3d, r28	; 61
 c5c:	ed 01       	movw	r28, r26
 c5e:	08 95       	ret

00000c60 <_exit>:
 c60:	f8 94       	cli

00000c62 <__stop_program>:
 c62:	ff cf       	rjmp	.-2      	; 0xc62 <__stop_program>
